/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/whitespace-Plugin.ts
var import_obsidian2 = require("obsidian");
var import_view = require("@codemirror/view");

// src/whitespace-SettingsTab.ts
var import_obsidian = require("obsidian");
var ShowWhitespaceSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async save() {
    await this.plugin.updateSettings(this.newSettings);
  }
  async display() {
    await this.plugin.loadSettings();
    this.reset();
  }
  async reset() {
    this.newSettings = JSON.parse(JSON.stringify(this.plugin.settings));
    this.drawElements();
  }
  drawElements() {
    const id = this.plugin.manifest.id;
    const name = this.plugin.manifest.name;
    this.containerEl.empty();
    this.containerEl.addClass(id);
    new import_obsidian.Setting(this.containerEl).setHeading().setName(name);
    new import_obsidian.Setting(this.containerEl).setName("Save settings").setClass(id + "-save-reset").addButton(
      (button) => button.setIcon("reset").setTooltip(
        "Reset to previously saved (or generated) values"
      ).onClick(() => {
        this.reset();
        console.log("(SW-CM6) Configuration reset");
      })
    ).addButton((button) => {
      button.setIcon("save").setTooltip("Save current values").onClick(async () => {
        await this.save();
      });
      this.saveButton = button.buttonEl;
    });
    new import_obsidian.Setting(this.containerEl).setName("Suppress plugin styles").setDesc(
      "Enable to remove plugin styles. You will need to define your own snippet to customize the appearance of whitespace"
    ).addToggle(
      (toggle) => toggle.setValue(this.newSettings.disablePluginStyles).onChange(async (value) => {
        const redraw = value != this.newSettings.disablePluginStyles;
        this.newSettings.disablePluginStyles = value;
        if (redraw) {
          this.drawElements();
        }
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Always show blockquote markers").setDesc("Show the leading > for blockquotes in Live Preview").addToggle(
      (toggle) => toggle.setValue(this.newSettings.showBlockquoteMarkers).onChange(async (value) => {
        const redraw = value != this.newSettings.showBlockquoteMarkers;
        this.newSettings.showBlockquoteMarkers = value;
        if (redraw) {
          this.drawElements();
        }
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Show all whitespace characters in code blocks").setDesc(
      "Add a marker for all whitespace characters in code blocks (included in Show all whitespace)"
    ).addToggle(
      (toggle) => toggle.setValue(this.newSettings.showCodeblockWhitespace).onChange(async (value) => {
        value = value || this.newSettings.showAllWhitespace;
        const redraw = value != this.newSettings.showCodeblockWhitespace;
        this.newSettings.showCodeblockWhitespace = value;
        if (redraw) {
          this.drawElements();
        }
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Show all whitespace characters").setDesc(
      "Add a marker for all whitespace characters, even those between words"
    ).addToggle(
      (toggle) => toggle.setValue(this.newSettings.showAllWhitespace).onChange(async (value) => {
        const redraw = value != this.newSettings.showAllWhitespace;
        this.newSettings.showAllWhitespace = value;
        if (redraw) {
          this.drawElements();
        }
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Outline list markers").setDesc(
      "Add a style to space reserved by list markers (e.g. ' -' or ' 1.')"
    ).addToggle(
      (toggle) => toggle.setValue(this.newSettings.outlineListMarkers).onChange(async (value) => {
        const redraw = value != this.newSettings.outlineListMarkers;
        this.newSettings.outlineListMarkers = value;
        if (redraw) {
          this.drawElements();
        }
      })
    );
  }
  /** Save on exit */
  hide() {
    this.save();
  }
};

// src/whitespace-Plugin.ts
var DEFAULT_SETTINGS = {
  version: {
    major: 0,
    minor: 0,
    patch: 0
  },
  disablePluginStyles: false,
  showBlockquoteMarkers: false,
  showCodeblockWhitespace: false,
  showAllWhitespace: false,
  outlineListMarkers: false
};
var ShowWhitespacePlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    /** CodeMirror 6 extensions. Tracked via array to allow for dynamic updates. */
    this.cmExtension = [];
    this.classList = [];
    this.onExternalSettingsChange = (0, import_obsidian2.debounce)(
      async () => {
        this.settings = Object.assign(
          {},
          this.settings,
          await this.loadData()
        );
        this.removeClasses();
        this.initClasses();
        console.debug("(SW-CM6) external settings changed");
      },
      2e3,
      true
    );
  }
  async onload() {
    console.info(
      "loading Show Whitespace (SW-CM6) v" + this.manifest.version
    );
    await this.loadSettings();
    this.addSettingTab(new ShowWhitespaceSettingsTab(this.app, this));
    document.body.classList.add(this.manifest.id);
    this.initClasses();
    this.cmExtension.push((0, import_view.highlightWhitespace)());
    this.cmExtension.push((0, import_view.highlightTrailingWhitespace)());
    this.registerEditorExtension(this.cmExtension);
  }
  initClasses() {
    this.classList = [];
    if (this.settings.disablePluginStyles) {
      this.classList.push("swcm6-nix-plugin-styles");
    }
    if (this.settings.showBlockquoteMarkers) {
      this.classList.push("swcm6-show-blockquote-markers");
    }
    if (this.settings.showCodeblockWhitespace) {
      this.classList.push("swcm6-show-codeblock-whitespace");
    }
    if (this.settings.showAllWhitespace) {
      this.classList.push("swcm6-show-all-whitespace");
    }
    if (this.settings.outlineListMarkers) {
      this.classList.push("swcm6-outline-list-markers");
    }
    document.body.classList.add(...this.classList);
  }
  removeClasses() {
    document.body.classList.remove(...this.classList);
  }
  onunload() {
    console.log("(SW-CM6) unloading Show Whitespace");
    document.body.classList.add(this.manifest.id);
    this.removeClasses();
  }
  async handleConfigFileChange() {
    await super.handleConfigFileChange();
    this.onExternalSettingsChange();
  }
  async loadSettings() {
    if (!this.settings) {
      const options = await this.loadData();
      this.settings = Object.assign({}, DEFAULT_SETTINGS, options);
      const version = toVersion(this.manifest.version);
      if (compareVersion(version, this.settings.version) != 0) {
        this.settings.version = version;
        await this.saveSettings();
      }
    }
  }
  async updateSettings(newSettings) {
    this.settings = Object.assign({}, this.settings, newSettings);
    await this.saveSettings();
    this.removeClasses();
    this.initClasses();
    console.log("(SW-CM6) settings and classes updated");
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
function compareVersion(v1, v2) {
  if (v1.major === v2.major) {
    if (v1.minor === v2.minor) {
      return v1.patch - v2.patch;
    }
    return v1.minor - v2.minor;
  }
  return v1.major - v2.major;
}
function toVersion(version) {
  const v = version.split(".");
  return {
    major: Number(v[0]),
    minor: Number(v[1]),
    patch: Number(v[2])
  };
}

// src/main.ts
var main_default = ShowWhitespacePlugin;
//# sourceMappingURL=data:application/json;base64,
